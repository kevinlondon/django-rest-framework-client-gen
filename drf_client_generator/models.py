import os
from django.conf import settings
from django.utils.importlib import import_module
from cookiecutter.main import cookiecutter

from rest_framework.routers import SimpleRouter
from .helpers import get_template, change_directory

PARENT_FOLDER = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
COOKIECUTTERS = os.path.join(PARENT_FOLDER, "cookiecutters")
USER_PATH = os.getcwd()


class ClientSDK(object):

    def __init__(self, name):
        self.name = name
        self.path = os.path.join(USER_PATH, name, name)
        self._urls = None
        self._routers = []

    @property
    def routers(self):
        if not self._routers:
            self._populate_routers()

        return self._routers

    def _populate_routers(self):
        if not self._urls:
            self._urls = import_module(settings.ROOT_URLCONF)

        url_names = dir(self._urls)
        for name in url_names:
            potential_router = getattr(self._urls, name)
            if isinstance(potential_router, SimpleRouter):
                self._routers.append(potential_router)

    def make(self):
        self._make_skeleton()
        for router in self.routers:
            self._make_resources(router)

    def update(self):
        for router in self.routers:
            self._update_resources(router)

    def _make_resources(self, router):
        for entry in router.registry:
            resource = ClientResource(router_entry=entry, sdk_path=self.path)
            resource.make()

    def _update_resources(self, router):
        for entry in router.registry:
            resource = ClientResource(router_entry=entry, sdk_path=self.path)
            resource.autogenerate()

    def _make_skeleton(self):
        template = os.path.join(COOKIECUTTERS, "sdk")
        context = {"repo_name": self.name}
        cookiecutter(template, no_input=True, extra_context=context)


class ClientResource(object):

    def __init__(self, router_entry, sdk_path):
        self.context = self._make_context(router_entry)
        self._sdk_path = sdk_path

    def make(self):
        self._make_skeleton()
        self.autogenerate()

    def autogenerate(self):
        self._write_template("resources.py")
        self._write_template("api.py")

    def _make_skeleton(self):
        with change_directory(self._sdk_path):
            template = os.path.join(COOKIECUTTERS, "resource")
            cookiecutter(template, no_input=True, extra_context=self.context)

    def _make_context(self, router_entry):
        route, viewset, basename = router_entry
        serializer = viewset.serializer_class
        return {
            "repo_name": route,
            "route_name": route,
            "resource_class": serializer.Meta.model.__name__,
            "name": basename,
            "fields": serializer().get_fields(),
        }

    def _write_template(self, template_name):
        template = get_template(template_name)
        autogen_path = os.path.join(self._sdk_path, self.context['route_name'],
                                    "autogenerated")
        path = os.path.join(autogen_path, template_name)
        with open(path, 'w') as fobj:
            fobj.write(template.render(**self.context))
