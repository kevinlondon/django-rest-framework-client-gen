import os
from django.conf import settings
from django.utils.importlib import import_module
from cookiecutter.main import cookiecutter

from .helpers import make_context, get_template

PARENT_FOLDER = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
COOKIECUTTERS = os.path.join(PARENT_FOLDER, "cookiecutters")
USER_PATH = os.getcwd()


class ClientSDK(object):

    urls = None

    def __init__(self, name):
        self.name = name
        self.path = os.path.join(USER_PATH, name, name)
        print name, self.path

    @property
    def routers(self):
        if not self.urls:
            self.urls = import_module(settings.ROOT_URLCONF)

        return [self.urls.router, ]

    def make(self):
        self.make_skeleton()
        for router in self.routers:
            self.make_resources(router)

    def update(self):
        for router in self.routers:
            self.update_resources(router)

    def make_skeleton(self):
        template = os.path.join(COOKIECUTTERS, "sdk")
        cookiecutter(template, no_input=True,
                     extra_context={"repo_name": self.name})

    def make_resources(self, router):
        os.chdir(self.path)
        for route, viewset, basename in router.registry:
            context = make_context(route, viewset, basename)
            url = os.path.join(COOKIECUTTERS, "resource")
            cookiecutter(url, no_input=True, extra_context=context)

        self.update_resources(router)

    def update_resources(self, router):
        os.chdir(self.path)
        for route, viewset, basename in router.registry:
            context = make_context(route, viewset, basename)
            self.make_resource_file(context)
            self.make_api_file(context)
            print "Updated one resource."

    def make_resource_file(self, context):
        template = get_template("resources.py")
        folder = os.path.join(self.path, context['repo_name'], "autogenerated")
        resources_path = os.path.join(folder, "resources.py")
        with open(resources_path, 'w') as fobj:
            fobj.write(template.render(**context))

    def make_api_file(self, context):
        template = get_template("api.py")
        folder = os.path.join(self.path, context['repo_name'], "autogenerated")
        api_path = os.path.join(folder, "api.py")
        with open(api_path, 'w') as fobj:
            fobj.write(template.render(**context))
